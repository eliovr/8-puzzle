/**
* Set up for the 15-Puzzle game (https://en.wikipedia.org/wiki/15_puzzle).
* Here you'll find what you need to code and practice search algorithms
* using Scala.
*/

object Puzzle {
	/**
	* Tile is an algebraic data type composed of nine other types.
	* Each represent a tile of the puzzle, including the empty one.
	*/
	sealed abstract class Tile
	case object Empty extends Tile
	case object One extends Tile
	case object Two extends Tile
	case object Three extends Tile
	case object Four extends Tile
	case object Five extends Tile
	case object Six extends Tile
	case object Seven extends Tile
	case object Eight extends Tile

	/**
	* Puzzle is a list of tiles.
	*/
	type Puzzle = List[Tile]

	/**
	* Given a Puzzle, return a list of new puzzles, that is, a list of
	* new possible states. These are generated by "moving" tiles according to
	* the restrictions of the puzzle.
	*/
	def unfold (p: Puzzle): List[Puzzle] = {
		/**
		* Swap the position of two elements given their index in the list.
		*/
		def swap(p: Puzzle, i1: Int, i2: Int): Puzzle = {
			require(i1 < i2, "i1 should be an index lower than i2")
			val (a, h1 :: b) = p.splitAt(i1)
			val (c, h2 :: d) = b.splitAt(i2 - i1 - 1)
			a ::: (h2 :: c) ::: (h1 :: d)
		}

		var children: List[Puzzle] = Nil
		val i = p.indexWhere(_ == Empty)
		val row = i / 3
		val col = i - (3 * row)

		if (col < 2) children = swap(p, i, i + 1) :: children	// right
		if (col > 0) children = swap(p, i - 1, i) :: children	// left
		if (row < 2) children = swap(p, i, i + 3) :: children	// bottom
		if (row > 0) children = swap(p, i - 3, i) :: children	// top

		children
	}

	/**
	* Returns true if the given puzzle represents a solution, false otherwise.
	*/
	def isSolution(p: Puzzle): Boolean =
		p.filter(_ != Empty) == List(One, Two, Three, Four, Five, Six, Seven, Eight)

	/**
	* Generates a new random puzzle.
	*/
	def newPuzzle: Puzzle = scala.util.Random.shuffle{
		List(Empty, One, Two, Three, Four, Five, Six, Seven, Eight)
	}

	// ==========================================
	// -------------- Your code here ------------


}
